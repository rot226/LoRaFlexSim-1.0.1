#!/usr/bin/env python3
"""Generate a report comparing FLoRa and run.py metrics."""

from __future__ import annotations

import argparse
from pathlib import Path

import pandas as pd
import matplotlib.pyplot as plt

from VERSION_4.launcher.compare_flora import load_flora_metrics


def load_run_metrics(csv_path: str | Path) -> dict[str, float]:
    """Return average metrics from the CSV generated by run.py."""
    df = pd.read_csv(csv_path)

    for col in [
        "delivered",
        "collisions",
        "PDR(%)",
        "throughput_bps",
        "energy_J",
        "energy",
    ]:
        if col in df.columns:
            df[col] = pd.to_numeric(df[col], errors="coerce")

    metrics: dict[str, float] = {}
    if "delivered" in df.columns:
        metrics["delivered"] = df["delivered"].mean()
    if "collisions" in df.columns:
        metrics["collisions"] = df["collisions"].mean()
    if "PDR(%)" in df.columns:
        metrics["PDR"] = df["PDR(%)"].mean() / 100.0
    if "throughput_bps" in df.columns:
        metrics["throughput_bps"] = df["throughput_bps"].mean()
    if "energy_J" in df.columns:
        metrics["energy_J"] = df["energy_J"].mean()
    elif "energy" in df.columns:
        metrics["energy_J"] = df["energy"].mean()

    return metrics


def generate_report(
    flora_csv: str | Path, sim_csv: str | Path, *, output_prefix: str = "report"
) -> None:
    flora = load_flora_metrics(flora_csv)
    sim = load_run_metrics(sim_csv)

    metrics = ["PDR", "collisions", "throughput_bps", "energy_J"]
    rows = []
    for m in metrics:
        flora_val = flora.get(m, 0)
        sim_val = sim.get(m, 0)
        diff = sim_val - flora_val
        rows.append({"Metric": m, "FLoRa": flora_val, "run.py": sim_val, "Diff": diff})

    df = pd.DataFrame(rows)
    print(df.to_string(index=False))

    # bar chart for main metrics
    x = range(len(metrics))
    width = 0.35
    plt.figure(figsize=(8, 4))
    plt.bar([p - width / 2 for p in x], df["FLoRa"], width, label="FLoRa")
    plt.bar([p + width / 2 for p in x], df["run.py"], width, label="run.py")
    plt.xticks(list(x), metrics)
    plt.ylabel("Value")
    plt.title("Metrics comparison")
    plt.legend()
    plt.tight_layout()
    plt.savefig(f"{output_prefix}_metrics.png")

    # SF distribution comparison if available
    if "sf_distribution" in flora and "sf_distribution" in sim:
        flora_sf = pd.Series(flora["sf_distribution"], name="FLoRa")
        sim_sf = pd.Series(sim["sf_distribution"], name="run.py")
        sf_df = pd.concat([flora_sf, sim_sf], axis=1).fillna(0)
        sf_df.plot(kind="bar")
        plt.ylabel("Packets")
        plt.title("Spreading factor distribution")
        plt.tight_layout()
        plt.savefig(f"{output_prefix}_sf.png")


def main() -> None:
    parser = argparse.ArgumentParser(description="Compare FLoRa and run.py CSVs")
    parser.add_argument("flora_csv", help="CSV exported by FLoRa")
    parser.add_argument("sim_csv", help="CSV produced by VERSION_4/run.py")
    parser.add_argument(
        "--output-prefix",
        default="report",
        help="Prefix for generated plot files (default: report)",
    )
    args = parser.parse_args()
    generate_report(args.flora_csv, args.sim_csv, output_prefix=args.output_prefix)


if __name__ == "__main__":
    main()
